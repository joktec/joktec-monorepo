version: '3.8'

services:
  mongo:
    container_name: btg-mongo
    image: mongo:4.2.2
    ports:
      - '27017:27017'
    volumes:
      - .docker/mongo/data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=StrongP%40ssword
      - MONGODB_USER=main
      - MONGODB_PASS=StrongP%40ssword
      - MONGODB_DATABASE=main
    restart: always
    networks:
      - btg-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo db:27017/speech-api --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  mysql:
    container_name: btg-mysql
    image: mysql:8.0.30
    ports:
      - '3306:3306'
    volumes:
      - .docker/mysql/data:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=jobhop_dev
      - MYSQL_USER=jobhop_dev
      - MYSQL_PASSWORD=tDYidUDJscyoTM7W
      - MYSQL_ROOT_PASSWORD=FZyNFRNUcnuDvJD5
    restart: always
    networks:
      - btg-network

  rabbitmq:
    container_name: btg-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - .docker/rabbitmq/data:/var/lib/rabbitmq/mnesia
    environment:
      - RABBITMQ_DEFAULT_USER=myuser
      - RABBITMQ_DEFAULT_PASS=mypassword
    restart: always
    networks:
      - btg-network

  redis:
    container_name: btg-redis
    image: redis:6.0.5
    ports:
      - '6379:6379'
    volumes:
      - .docker/redis/data:/var/lib/redis/data
      - .docker/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server --save 20 1 --loglevel warning --requirepass jC2qe6890UxcxPKv
    restart: always
    networks:
      - btg-network
    healthcheck:
      test: [ 'CMD', 'redis-cli','ping' ]
      interval: 30s
      timeout: 10s
      retries: 5

  setup:
    container_name: btg-elk-setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./docker/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./docker/setup/helpers.sh:/helpers.sh:ro,Z
      - ./docker/setup/roles:/roles:ro,Z
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - btg-network
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: btg-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
      - .docker/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - .docker/elk/elasticsearch/data:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    networks:
      - btg-network

  logstash:
    container_name: btg-logstash
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    volumes:
      - .docker/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - .docker/elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - btg-network
    depends_on:
      - elasticsearch

  kibana:
    container_name: btg-kibana
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    volumes:
      - .docker/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - btg-network
    depends_on:
      - elasticsearch

# Docker Networks
networks:
  btg-network:
    name: btg-network
    driver: bridge

volumes:
  setup:
  elasticsearch:
